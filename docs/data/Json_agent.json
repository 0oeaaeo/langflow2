{"description":"","name":"New Flow","id":"bfd7a711-3225-44ef-b1c3-044499b14123","data":{"nodes":[{"width":384,"height":323,"id":"dndnode_230","type":"genericNode","position":{"x":390,"y":230},"data":{"type":"JsonSpec","node":{"template":{"max_value_length":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"400","password":false,"name":"max_value_length","advanced":false,"type":"int","list":false},"path":{"required":true,"placeholder":"","show":true,"multiline":false,"value":"openapi.yaml","suffixes":[".json",".yaml",".yml"],"password":false,"name":"path","advanced":false,"type":"file","list":false,"fileTypes":["json","yaml","yml"],"content":"data:application/x-yaml;base64,"},"_type":"JsonSpec"},"description":"","base_classes":["Tool","JsonSpec"]},"id":"dndnode_230","value":null},"selected":true,"positionAbsolute":{"x":390,"y":230},"dragging":false},{"width":384,"height":227,"id":"dndnode_231","type":"genericNode","position":{"x":998,"y":336},"data":{"type":"JsonToolkit","node":{"template":{"spec":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"spec","advanced":false,"type":"JsonSpec","list":false},"_type":"JsonToolkit"},"description":"Toolkit for interacting with a JSON spec.","base_classes":["JsonToolkit","BaseToolkit"]},"id":"dndnode_231","value":null},"selected":false,"positionAbsolute":{"x":998,"y":336},"dragging":false},{"width":384,"height":597,"id":"dndnode_232","type":"genericNode","position":{"x":392,"y":598},"data":{"type":"OpenAI","node":{"template":{"cache":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"cache","advanced":false,"type":"bool","list":false},"verbose":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"verbose","advanced":false,"type":"bool","list":false},"callbacks":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"callbacks","advanced":false,"type":"langchain.callbacks.base.BaseCallbackHandler","list":true},"client":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"client","advanced":false,"type":"Any","list":false},"model_name":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"text-davinci-003","password":false,"options":["text-davinci-003","text-davinci-002","text-curie-001","text-babbage-001","text-ada-001"],"name":"model_name","advanced":false,"type":"str","list":true},"temperature":{"required":false,"placeholder":"","show":true,"multiline":false,"value":0.7,"password":false,"name":"temperature","advanced":false,"type":"float","list":false},"max_tokens":{"required":false,"placeholder":"","show":true,"multiline":false,"value":256,"password":true,"name":"max_tokens","advanced":false,"type":"int","list":false},"top_p":{"required":false,"placeholder":"","show":false,"multiline":false,"value":1,"password":false,"name":"top_p","advanced":false,"type":"float","list":false},"frequency_penalty":{"required":false,"placeholder":"","show":false,"multiline":false,"value":0,"password":false,"name":"frequency_penalty","advanced":false,"type":"float","list":false},"presence_penalty":{"required":false,"placeholder":"","show":false,"multiline":false,"value":0,"password":false,"name":"presence_penalty","advanced":false,"type":"float","list":false},"n":{"required":false,"placeholder":"","show":false,"multiline":false,"value":1,"password":false,"name":"n","advanced":false,"type":"int","list":false},"best_of":{"required":false,"placeholder":"","show":false,"multiline":false,"value":1,"password":false,"name":"best_of","advanced":false,"type":"int","list":false},"model_kwargs":{"required":false,"placeholder":"","show":true,"multiline":false,"password":false,"name":"model_kwargs","advanced":true,"type":"code","list":false},"openai_api_key":{"required":false,"placeholder":"","show":true,"multiline":false,"value":"","password":true,"name":"openai_api_key","display_name":"OpenAI API Key","advanced":false,"type":"str","list":false},"openai_api_base":{"required":false,"placeholder":"","show":true,"multiline":false,"password":true,"name":"openai_api_base","advanced":false,"type":"str","list":false,"value":""},"openai_organization":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"openai_organization","advanced":false,"type":"str","list":false},"batch_size":{"required":false,"placeholder":"","show":false,"multiline":false,"value":20,"password":false,"name":"batch_size","advanced":false,"type":"int","list":false},"request_timeout":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"request_timeout","advanced":false,"type":"float","list":false},"logit_bias":{"required":false,"placeholder":"","show":false,"multiline":false,"password":false,"name":"logit_bias","advanced":false,"type":"code","list":false},"max_retries":{"required":false,"placeholder":"","show":false,"multiline":false,"value":6,"password":false,"name":"max_retries","advanced":false,"type":"int","list":false},"streaming":{"required":false,"placeholder":"","show":false,"multiline":false,"value":false,"password":false,"name":"streaming","advanced":false,"type":"bool","list":false},"allowed_special":{"required":false,"placeholder":"","show":false,"multiline":false,"value":[],"password":false,"name":"allowed_special","advanced":false,"type":"Literal'all'","list":true},"disallowed_special":{"required":false,"placeholder":"","show":false,"multiline":false,"value":"all","password":false,"name":"disallowed_special","advanced":false,"type":"Literal'all'","list":false},"_type":"OpenAI"},"description":"Wrapper around OpenAI large language models.","base_classes":["BaseLLM","BaseOpenAI","OpenAI","BaseLanguageModel"]},"id":"dndnode_232","value":null},"selected":false,"positionAbsolute":{"x":392,"y":598},"dragging":false},{"width":384,"height":267,"id":"dndnode_233","type":"genericNode","position":{"x":1500,"y":654},"data":{"type":"JsonAgent","node":{"template":{"toolkit":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"toolkit","advanced":false,"type":"BaseToolkit","list":false},"llm":{"required":true,"placeholder":"","show":true,"multiline":false,"password":false,"name":"llm","advanced":false,"type":"BaseLanguageModel","list":false},"_type":"json_agent"},"description":"Construct a json agent from an LLM and tools.","base_classes":["AgentExecutor"]},"id":"dndnode_233","value":null},"selected":false,"positionAbsolute":{"x":1500,"y":654},"dragging":false}],"edges":[{"source":"dndnode_230","sourceHandle":"JsonSpec|dndnode_230|Tool|JsonSpec","target":"dndnode_231","targetHandle":"JsonSpec|spec|dndnode_231","className":"animate-pulse","id":"reactflow__edge-dndnode_230JsonSpec|dndnode_230|Tool|JsonSpec-dndnode_231JsonSpec|spec|dndnode_231","selected":false},{"source":"dndnode_231","sourceHandle":"JsonToolkit|dndnode_231|JsonToolkit|BaseToolkit","target":"dndnode_233","targetHandle":"BaseToolkit|toolkit|dndnode_233","className":"animate-pulse","id":"reactflow__edge-dndnode_231JsonToolkit|dndnode_231|JsonToolkit|BaseToolkit-dndnode_233BaseToolkit|toolkit|dndnode_233","selected":false},{"source":"dndnode_232","sourceHandle":"OpenAI|dndnode_232|BaseLLM|BaseOpenAI|OpenAI|BaseLanguageModel","target":"dndnode_233","targetHandle":"BaseLanguageModel|llm|dndnode_233","className":"animate-pulse","id":"reactflow__edge-dndnode_232OpenAI|dndnode_232|BaseLLM|BaseOpenAI|OpenAI|BaseLanguageModel-dndnode_233BaseLanguageModel|llm|dndnode_233","selected":false}],"viewport":{"x":4,"y":1,"zoom":0.5}}}